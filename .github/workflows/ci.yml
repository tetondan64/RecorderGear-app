name: CI

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'
      - '.github/workflows/ci.yml'
  push:
    branches: [ main ]
    paths:
      - 'apps/**'

jobs:
  mobile-test:
    runs-on: ubuntu-latest
    # Runs for mobile changes or push events
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'apps/mobile/package-lock.json'

    - name: Install dependencies
      working-directory: apps/mobile
      run: npm ci

    - name: Run linter
      working-directory: apps/mobile
      run: npm run lint

    - name: Run type check
      working-directory: apps/mobile
      run: npm run typecheck

    - name: Run tests
      working-directory: apps/mobile
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v4
      with:
        directory: apps/mobile/coverage
        fail_ci_if_error: false
        verbose: true

    - name: Test build (dry run)
      working-directory: apps/mobile
      run: |
        # Install Expo CLI globally
        npm install -g @expo/cli
        
        # Verify app.json is valid
        npx expo config --type=public

  api-test:
    runs-on: ubuntu-latest
    # Runs for API changes or push events
    
    strategy:
      matrix:
        node-version: [20.x]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: recordergear
          POSTGRES_USER: recordergear
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio:
        image: minio/minio:RELEASE.2023-11-01T18-37-25Z
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live" --health-interval=10s --health-timeout=3s --health-retries=5
        volumes:
          - /tmp/minio-data:/data
        command: server /data

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'apps/api/package-lock.json'

    - name: Install dependencies
      working-directory: apps/api
      run: npm ci

    - name: Setup MinIO bucket
      run: |
        # Install MinIO client
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        
        # Configure MinIO client
        mc alias set local http://localhost:9000 minioadmin minioadmin
        
        # Create test bucket
        mc mb local/recordergear-dev || true
        
        # Set public read policy for testing
        mc anonymous set public local/recordergear-dev || true

    - name: Run linter
      working-directory: apps/api
      run: npm run lint

    - name: Run type check
      working-directory: apps/api
      run: npm run typecheck

    - name: Run database migrations
      working-directory: apps/api
      run: npm run db:migrate
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://recordergear:testpass@localhost:5432/recordergear
        DB_SSL: false

    - name: Run tests
      working-directory: apps/api
      run: npm test -- --coverage --watchAll=false
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://recordergear:testpass@localhost:5432/recordergear
        DB_SSL: false
        S3_ENDPOINT: http://localhost:9000
        S3_ACCESS_KEY_ID: minioadmin
        S3_SECRET_ACCESS_KEY: minioadmin
        S3_BUCKET: recordergear-dev
        S3_REGION: us-east-1
        S3_FORCE_PATH_STYLE: true
        PRESIGN_EXPIRES_SEC: 900
        PORT: 4000

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v4
      with:
        directory: apps/api/coverage
        fail_ci_if_error: false
        verbose: true

  comment-pr:
    runs-on: ubuntu-latest
    needs: [mobile-test, api-test]
    if: always() && github.event_name == 'pull_request'
    steps:
    - name: Comment PR with test results
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number } = context.issue;
          
          // Get job results
          const mobileResult = '${{ needs.mobile-test.result }}';
          const apiResult = '${{ needs.api-test.result }}';
          
          const getStatusEmoji = (result) => {
            if (result === 'success') return '✅';
            if (result === 'failure') return '❌';
            if (result === 'skipped') return '⏭️';
            return '❓';
          };
          
          const body = `## CI Results
          
### Mobile App ${getStatusEmoji(mobileResult)}
**Status**: ${mobileResult}
- Dependencies, linting, type checking, tests, build verification
          
### API Server ${getStatusEmoji(apiResult)}
**Status**: ${apiResult}  
- Dependencies, linting, type checking, PostgreSQL migrations, E2E tests with PostgreSQL + MinIO
          
**Overall**: ${(mobileResult === 'success' || mobileResult === 'skipped') && (apiResult === 'success' || apiResult === 'skipped') ? '✅ All checks passed' : '❌ Some checks failed'}
          
[View full workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body
          });